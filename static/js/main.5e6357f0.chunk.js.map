{"version":3,"sources":["components/Modal.js","components/FirstTextInput.js","components/ConditionOneIf.js","components/SubConditionOne.js","components/ConditionOneThen.js","components/ConfirmButton.js","components/CancelButton.js","components/ModalContent.js","App.js","serviceWorker.js","index.js"],"names":["Modal","dialog","react_default","a","createElement","className","this","props","children","isOpen","Component","FirstTextInput","type","placeholder","ConditionOneIf","class","name","required","value","selected","SubConditionOne","ConditionOneThen","ConfirmButton","id","CancelButton","ModalContent","src_components_FirstTextInput","src_components_ConditionOneIf","src_components_SubConditionOne","src_components_ConditionOneThen","src_components_ConfirmButton","src_components_CancelButton","App","state","onOpenClick","e","_this","setState","onClick","src_components_Modal","src_components_ModalContent","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5e6357f0.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Modal.css';\r\n\r\nclass Modal extends Component {\r\n    render() {\r\n        let dialog = <div className=\"modal\">{this.props.children}</div>;\r\n\r\n        if (!this.props.isOpen) {\r\n            dialog = null;\r\n        }\r\n        return <div>{dialog}</div>;\r\n    }\r\n}\r\n\r\nexport default Modal;\r\n","import React, { Component } from 'react';\r\nimport './FirstTextInput.css';\r\n\r\nclass FirstTextInput extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"para-main\">\r\n                <label className=\"para2-header\">Revenue Group Title</label>\r\n                <br />\r\n                <input className=\"para-main-input-text1\" type=\"text\" placeholder=\"Fashion - 15%\" />\r\n                <br />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FirstTextInput;\r\n","import React, { Component } from 'react';\r\nimport './ConditionOneIf.css';\r\n\r\nclass ConditionOneIf extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"condition-1\">\r\n                <p class=\"para-main-text1\">If</p>\r\n                &nbsp;\r\n                <select name=\"select-field1\" className=\"para-main-select-field1\" required>\r\n                    <option value=\"\" selected>\r\n                        ALL\r\n                    </option>\r\n                    <option>Option 1 - Text Here</option>\r\n                    <option>Option 2 - Text Here</option>\r\n                    <option>Option 3 - Text Here</option>\r\n                </select>\r\n                &nbsp;\r\n                <p className=\"para-main-text2\">of the below conditions are met</p>\r\n                <br />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ConditionOneIf;\r\n","import React, { Component } from 'react';\r\nimport './SubConditionOne.css';\r\n\r\nclass SubConditionOne extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"sub-condition-1\">\r\n                <select name=\"select-field2\" className=\"para-main-select-field2\" required>\r\n                    <option value=\"\" selected>\r\n                        aff_sub\r\n                    </option>\r\n                    <option>Option 1 - Text Here</option>\r\n                    <option>Option 2 - Text Here</option>\r\n                    <option>Option 3 - Text Here</option>\r\n                </select>\r\n                <select name=\"select-field3\" className=\"para-main-select-field1\" required>\r\n                    <option value=\"\" selected>\r\n                        is\r\n                    </option>\r\n                    <option>Option 1 - Text Here</option>\r\n                    <option>Option 2 - Text Here</option>\r\n                    <option>Option 3 - Text Here</option>\r\n                </select>\r\n                <input className=\"para-main-input-text2\" type=\"text\" placeholder=\"insert parameter\" />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SubConditionOne;\r\n","import React, { Component } from 'react';\r\nimport './ConditionOneThen.css';\r\n\r\nclass ConditionOneThen extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"condition-1\">\r\n                <span>\r\n                    <p class=\"para-main-text1\">then revenue is</p>\r\n                    &nbsp;\r\n                </span>\r\n                <span className=\"border1\">\r\n                    <input className=\"para-main-input-number1\" type=\"number\" placeholder=\"15\" />%\r\n                </span>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ConditionOneThen;\r\n","import React, { Component } from 'react';\r\nimport './ConfirmButton.css';\r\n\r\nclass ConfirmButton extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <button className=\"confirm-button\" id=\"confirm-button\">\r\n                    Confirm\r\n                </button>\r\n                <div />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ConfirmButton;\r\n","import React, { Component } from 'react';\r\nimport './CancelButton.css';\r\n\r\nclass CancelButton extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <button className=\"cancel-button\" id=\"cancel-button\">\r\n                    Cancel\r\n                </button>\r\n                <div />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CancelButton;\r\n","import React, { Component } from 'react';\r\nimport FirstTextInput from './FirstTextInput';\r\nimport ConditionOneIf from './ConditionOneIf';\r\nimport SubConditionOne from './SubConditionOne';\r\nimport ConditionOneThen from './ConditionOneThen';\r\nimport ConfirmButton from './ConfirmButton';\r\nimport CancelButton from './CancelButton';\r\nimport './ModalContent.css';\r\n\r\nclass ModalContent extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <form className=\"form-content\">\r\n                    <p className=\"para1-header\">Add Revenue Group</p>\r\n                    <FirstTextInput />\r\n                    <ConditionOneIf />\r\n                    <SubConditionOne />\r\n                    <ConditionOneThen />\r\n                    <br />\r\n                    <span>\r\n                        <ConfirmButton />\r\n                    </span>\r\n                    <CancelButton />\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ModalContent;\r\n","import React, { Component } from 'react';\nimport Modal from './components/Modal';\nimport ModalContent from './components/ModalContent'\nimport './App.css';\n\nclass App extends Component {\n    state = {\n        isOpen: false,\n    };\n\n    onOpenClick = e => {\n        this.setState({\n            isOpen: true,\n        });\n    };\n\n    render() {\n        return (\n            <div className=\"App\">\n                <div className=\"container\">\n                    <button onClick={this.onOpenClick} className=\"modal-button\" id=\"modal-button\">\n                        Click to Open Modal Window\n                    </button>\n                    <div />\n                </div>\n                <div>\n                    <Modal isOpen={this.state.isOpen}>\n                        <ModalContent />\n                    </Modal>\n                </div>\n            </div>\n        );\n    }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}